
Stm32f411x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000694  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800082c  0800082c  0001082c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800083c  0800083c  00010844  2**0
                  CONTENTS
  4 .ARM          00000000  0800083c  0800083c  00010844  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800083c  08000844  00010844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800083c  0800083c  0001083c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000840  08000840  00010840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000844  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000844  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010844  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f43  00000000  00000000  00010874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000030c  00000000  00000000  000117b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f0  00000000  00000000  00011ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b8  00000000  00000000  00011bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001dd4  00000000  00000000  00011c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000148a  00000000  00000000  00013a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000081a5  00000000  00000000  00014ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001d073  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002d4  00000000  00000000  0001d0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000814 	.word	0x08000814

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000814 	.word	0x08000814

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <GPIO_Init>:

/*
 * GPIO initialization
 */
void GPIO_Init(GPIOx_Handle_t *GPIO)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b089      	sub	sp, #36	; 0x24
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	uint32_t pinConfig = 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61fb      	str	r3, [r7, #28]
	//1. Configuring mode of GPIO
	if(GPIO->GPIO_PinConfig.pinMode <= GPIO_MODE_ANALOG)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	795b      	ldrb	r3, [r3, #5]
 80001f8:	2b03      	cmp	r3, #3
 80001fa:	d87f      	bhi.n	80002fc <GPIO_Init+0x114>
		// none interrupt mode
		/*
		 * 2*0 =  Ustawienia dla pinu 0 zerowy bait
		 * 2*1 = Ustawienia dla pinu numer 1 wpisane zostana w drugi bit
		 */
		pinConfig = (GPIO->GPIO_PinConfig.pinMode <<2 *(GPIO->GPIO_PinConfig.pinNumber));
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	795b      	ldrb	r3, [r3, #5]
 8000200:	461a      	mov	r2, r3
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	791b      	ldrb	r3, [r3, #4]
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	fa02 f303 	lsl.w	r3, r2, r3
 800020c:	61fb      	str	r3, [r7, #28]
		GPIO->pGPIOx->MODER  &=~(0x03<<pinConfig);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	2103      	movs	r1, #3
 8000216:	69fb      	ldr	r3, [r7, #28]
 8000218:	fa01 f303 	lsl.w	r3, r1, r3
 800021c:	43db      	mvns	r3, r3
 800021e:	4619      	mov	r1, r3
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	400a      	ands	r2, r1
 8000226:	601a      	str	r2, [r3, #0]
		GPIO->pGPIOx->MODER  |= pinConfig;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	6819      	ldr	r1, [r3, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	69fa      	ldr	r2, [r7, #28]
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]

		pinConfig = 0;
 8000238:	2300      	movs	r3, #0
 800023a:	61fb      	str	r3, [r7, #28]

		pinConfig = (GPIO->GPIO_PinConfig.pinSpeed <<2 *(GPIO->GPIO_PinConfig.pinNumber));
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	799b      	ldrb	r3, [r3, #6]
 8000240:	461a      	mov	r2, r3
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	791b      	ldrb	r3, [r3, #4]
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	fa02 f303 	lsl.w	r3, r2, r3
 800024c:	61fb      	str	r3, [r7, #28]
		GPIO->pGPIOx->OSPEEDR  &=~(0x03<<pinConfig);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	689a      	ldr	r2, [r3, #8]
 8000254:	2103      	movs	r1, #3
 8000256:	69fb      	ldr	r3, [r7, #28]
 8000258:	fa01 f303 	lsl.w	r3, r1, r3
 800025c:	43db      	mvns	r3, r3
 800025e:	4619      	mov	r1, r3
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	400a      	ands	r2, r1
 8000266:	609a      	str	r2, [r3, #8]
		GPIO->pGPIOx->OSPEEDR  |= pinConfig;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	6899      	ldr	r1, [r3, #8]
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	69fa      	ldr	r2, [r7, #28]
 8000274:	430a      	orrs	r2, r1
 8000276:	609a      	str	r2, [r3, #8]
		pinConfig = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	61fb      	str	r3, [r7, #28]


		pinConfig = (GPIO->GPIO_PinConfig.pinPuPd <<2 *(GPIO->GPIO_PinConfig.pinNumber));
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	79db      	ldrb	r3, [r3, #7]
 8000280:	461a      	mov	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	791b      	ldrb	r3, [r3, #4]
 8000286:	005b      	lsls	r3, r3, #1
 8000288:	fa02 f303 	lsl.w	r3, r2, r3
 800028c:	61fb      	str	r3, [r7, #28]
		GPIO->pGPIOx->PUPDR  &=~(0x03<<pinConfig);
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	68da      	ldr	r2, [r3, #12]
 8000294:	2103      	movs	r1, #3
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
 800029c:	43db      	mvns	r3, r3
 800029e:	4619      	mov	r1, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	400a      	ands	r2, r1
 80002a6:	60da      	str	r2, [r3, #12]
		GPIO->pGPIOx->PUPDR  |= pinConfig;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	68d9      	ldr	r1, [r3, #12]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	69fa      	ldr	r2, [r7, #28]
 80002b4:	430a      	orrs	r2, r1
 80002b6:	60da      	str	r2, [r3, #12]
		pinConfig = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61fb      	str	r3, [r7, #28]

		pinConfig = GPIO->GPIO_PinConfig.pinOType << GPIO->GPIO_PinConfig.pinNumber;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	7a1b      	ldrb	r3, [r3, #8]
 80002c0:	461a      	mov	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	791b      	ldrb	r3, [r3, #4]
 80002c6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ca:	61fb      	str	r3, [r7, #28]
		GPIO->pGPIOx->OTYPER  &=~(0x03<<pinConfig);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	685a      	ldr	r2, [r3, #4]
 80002d2:	2103      	movs	r1, #3
 80002d4:	69fb      	ldr	r3, [r7, #28]
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	43db      	mvns	r3, r3
 80002dc:	4619      	mov	r1, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	400a      	ands	r2, r1
 80002e4:	605a      	str	r2, [r3, #4]
		GPIO->pGPIOx->OTYPER  |= pinConfig;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	6859      	ldr	r1, [r3, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	69fa      	ldr	r2, [r7, #28]
 80002f2:	430a      	orrs	r2, r1
 80002f4:	605a      	str	r2, [r3, #4]
		pinConfig = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]
 80002fa:	e0a8      	b.n	800044e <GPIO_Init+0x266>
	else
	{


		//interrupt mode
		if (GPIO->GPIO_PinConfig.pinMode <= GPIO_MODE_IT_FALLING)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	795b      	ldrb	r3, [r3, #5]
 8000300:	2b04      	cmp	r3, #4
 8000302:	d817      	bhi.n	8000334 <GPIO_Init+0x14c>
		{

			//1. COnfigur trigger
			EXTI->FTSR |= (1<<GPIO->GPIO_PinConfig.pinNumber);
 8000304:	4b70      	ldr	r3, [pc, #448]	; (80004c8 <GPIO_Init+0x2e0>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	7912      	ldrb	r2, [r2, #4]
 800030c:	4611      	mov	r1, r2
 800030e:	2201      	movs	r2, #1
 8000310:	408a      	lsls	r2, r1
 8000312:	4611      	mov	r1, r2
 8000314:	4a6c      	ldr	r2, [pc, #432]	; (80004c8 <GPIO_Init+0x2e0>)
 8000316:	430b      	orrs	r3, r1
 8000318:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &=~ (1<<GPIO->GPIO_PinConfig.pinNumber);
 800031a:	4b6b      	ldr	r3, [pc, #428]	; (80004c8 <GPIO_Init+0x2e0>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	7912      	ldrb	r2, [r2, #4]
 8000322:	4611      	mov	r1, r2
 8000324:	2201      	movs	r2, #1
 8000326:	408a      	lsls	r2, r1
 8000328:	43d2      	mvns	r2, r2
 800032a:	4611      	mov	r1, r2
 800032c:	4a66      	ldr	r2, [pc, #408]	; (80004c8 <GPIO_Init+0x2e0>)
 800032e:	400b      	ands	r3, r1
 8000330:	6093      	str	r3, [r2, #8]
 8000332:	e035      	b.n	80003a0 <GPIO_Init+0x1b8>
		}
		else if (GPIO->GPIO_PinConfig.pinMode <= GPIO_MODE_IT_RISING)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	795b      	ldrb	r3, [r3, #5]
 8000338:	2b05      	cmp	r3, #5
 800033a:	d817      	bhi.n	800036c <GPIO_Init+0x184>
		{
			EXTI->RTSR |= (1<<GPIO->GPIO_PinConfig.pinNumber);
 800033c:	4b62      	ldr	r3, [pc, #392]	; (80004c8 <GPIO_Init+0x2e0>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	7912      	ldrb	r2, [r2, #4]
 8000344:	4611      	mov	r1, r2
 8000346:	2201      	movs	r2, #1
 8000348:	408a      	lsls	r2, r1
 800034a:	4611      	mov	r1, r2
 800034c:	4a5e      	ldr	r2, [pc, #376]	; (80004c8 <GPIO_Init+0x2e0>)
 800034e:	430b      	orrs	r3, r1
 8000350:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &=~ (1<<GPIO->GPIO_PinConfig.pinNumber);
 8000352:	4b5d      	ldr	r3, [pc, #372]	; (80004c8 <GPIO_Init+0x2e0>)
 8000354:	68db      	ldr	r3, [r3, #12]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	7912      	ldrb	r2, [r2, #4]
 800035a:	4611      	mov	r1, r2
 800035c:	2201      	movs	r2, #1
 800035e:	408a      	lsls	r2, r1
 8000360:	43d2      	mvns	r2, r2
 8000362:	4611      	mov	r1, r2
 8000364:	4a58      	ldr	r2, [pc, #352]	; (80004c8 <GPIO_Init+0x2e0>)
 8000366:	400b      	ands	r3, r1
 8000368:	60d3      	str	r3, [r2, #12]
 800036a:	e019      	b.n	80003a0 <GPIO_Init+0x1b8>
		}
		else if (GPIO->GPIO_PinConfig.pinMode <= GPIO_MODE_IT_FT_TRIGGER)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	795b      	ldrb	r3, [r3, #5]
 8000370:	2b06      	cmp	r3, #6
 8000372:	d815      	bhi.n	80003a0 <GPIO_Init+0x1b8>
		{
			EXTI->FTSR |= (1<<GPIO->GPIO_PinConfig.pinNumber);
 8000374:	4b54      	ldr	r3, [pc, #336]	; (80004c8 <GPIO_Init+0x2e0>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	7912      	ldrb	r2, [r2, #4]
 800037c:	4611      	mov	r1, r2
 800037e:	2201      	movs	r2, #1
 8000380:	408a      	lsls	r2, r1
 8000382:	4611      	mov	r1, r2
 8000384:	4a50      	ldr	r2, [pc, #320]	; (80004c8 <GPIO_Init+0x2e0>)
 8000386:	430b      	orrs	r3, r1
 8000388:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<GPIO->GPIO_PinConfig.pinNumber);
 800038a:	4b4f      	ldr	r3, [pc, #316]	; (80004c8 <GPIO_Init+0x2e0>)
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	7912      	ldrb	r2, [r2, #4]
 8000392:	4611      	mov	r1, r2
 8000394:	2201      	movs	r2, #1
 8000396:	408a      	lsls	r2, r1
 8000398:	4611      	mov	r1, r2
 800039a:	4a4b      	ldr	r2, [pc, #300]	; (80004c8 <GPIO_Init+0x2e0>)
 800039c:	430b      	orrs	r3, r1
 800039e:	6093      	str	r3, [r2, #8]
		}

		uint32_t  tmp1 = GPIO->GPIO_PinConfig.pinNumber/4;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	791b      	ldrb	r3, [r3, #4]
 80003a4:	089b      	lsrs	r3, r3, #2
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	61bb      	str	r3, [r7, #24]
		uint32_t  tmp2 = GPIO->GPIO_PinConfig.pinNumber%4;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	791b      	ldrb	r3, [r3, #4]
 80003ae:	f003 0303 	and.w	r3, r3, #3
 80003b2:	617b      	str	r3, [r7, #20]
		uint32_t port = WHICH_GPIO_PORT(GPIO->pGPIOx);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a44      	ldr	r2, [pc, #272]	; (80004cc <GPIO_Init+0x2e4>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d024      	beq.n	8000408 <GPIO_Init+0x220>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a43      	ldr	r2, [pc, #268]	; (80004d0 <GPIO_Init+0x2e8>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d01d      	beq.n	8000404 <GPIO_Init+0x21c>
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a41      	ldr	r2, [pc, #260]	; (80004d4 <GPIO_Init+0x2ec>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d016      	beq.n	8000400 <GPIO_Init+0x218>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a40      	ldr	r2, [pc, #256]	; (80004d8 <GPIO_Init+0x2f0>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d00f      	beq.n	80003fc <GPIO_Init+0x214>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a3e      	ldr	r2, [pc, #248]	; (80004dc <GPIO_Init+0x2f4>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d008      	beq.n	80003f8 <GPIO_Init+0x210>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a3d      	ldr	r2, [pc, #244]	; (80004e0 <GPIO_Init+0x2f8>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d101      	bne.n	80003f4 <GPIO_Init+0x20c>
 80003f0:	2305      	movs	r3, #5
 80003f2:	e00a      	b.n	800040a <GPIO_Init+0x222>
 80003f4:	2300      	movs	r3, #0
 80003f6:	e008      	b.n	800040a <GPIO_Init+0x222>
 80003f8:	2304      	movs	r3, #4
 80003fa:	e006      	b.n	800040a <GPIO_Init+0x222>
 80003fc:	2303      	movs	r3, #3
 80003fe:	e004      	b.n	800040a <GPIO_Init+0x222>
 8000400:	2302      	movs	r3, #2
 8000402:	e002      	b.n	800040a <GPIO_Init+0x222>
 8000404:	2301      	movs	r3, #1
 8000406:	e000      	b.n	800040a <GPIO_Init+0x222>
 8000408:	2300      	movs	r3, #0
 800040a:	613b      	str	r3, [r7, #16]

		RCC_SYSCFG_EN();
 800040c:	4b35      	ldr	r3, [pc, #212]	; (80004e4 <GPIO_Init+0x2fc>)
 800040e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000410:	4a34      	ldr	r2, [pc, #208]	; (80004e4 <GPIO_Init+0x2fc>)
 8000412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000416:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTIR[tmp1] |= (port << (tmp2 *4));
 8000418:	4a33      	ldr	r2, [pc, #204]	; (80004e8 <GPIO_Init+0x300>)
 800041a:	69bb      	ldr	r3, [r7, #24]
 800041c:	3302      	adds	r3, #2
 800041e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	6939      	ldr	r1, [r7, #16]
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	492e      	ldr	r1, [pc, #184]	; (80004e8 <GPIO_Init+0x300>)
 800042e:	431a      	orrs	r2, r3
 8000430:	69bb      	ldr	r3, [r7, #24]
 8000432:	3302      	adds	r3, #2
 8000434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR |= (1<<GPIO->GPIO_PinConfig.pinNumber);
 8000438:	4b23      	ldr	r3, [pc, #140]	; (80004c8 <GPIO_Init+0x2e0>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	7912      	ldrb	r2, [r2, #4]
 8000440:	4611      	mov	r1, r2
 8000442:	2201      	movs	r2, #1
 8000444:	408a      	lsls	r2, r1
 8000446:	4611      	mov	r1, r2
 8000448:	4a1f      	ldr	r2, [pc, #124]	; (80004c8 <GPIO_Init+0x2e0>)
 800044a:	430b      	orrs	r3, r1
 800044c:	6013      	str	r3, [r2, #0]

		//Unmisking interrupt

	}

	pinConfig = GPIO->GPIO_PinConfig.pinNumber%8;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	f003 0307 	and.w	r3, r3, #7
 8000456:	61fb      	str	r3, [r7, #28]
	uint8_t altNumber = GPIO->GPIO_PinConfig.pinNumber/8;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	791b      	ldrb	r3, [r3, #4]
 800045c:	08db      	lsrs	r3, r3, #3
 800045e:	73fb      	strb	r3, [r7, #15]
		GPIO->pGPIOx->AFR[altNumber]  &=~(0xF<<4 *(pinConfig));
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	7bfa      	ldrb	r2, [r7, #15]
 8000466:	3208      	adds	r2, #8
 8000468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800046c:	69fb      	ldr	r3, [r7, #28]
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	220f      	movs	r2, #15
 8000472:	fa02 f303 	lsl.w	r3, r2, r3
 8000476:	43db      	mvns	r3, r3
 8000478:	4618      	mov	r0, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	7bfa      	ldrb	r2, [r7, #15]
 8000480:	4001      	ands	r1, r0
 8000482:	3208      	adds	r2, #8
 8000484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		GPIO->pGPIOx->AFR[altNumber]  |= (GPIO->GPIO_PinConfig.pinAltFun <<4*(pinConfig));
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	7bfa      	ldrb	r2, [r7, #15]
 800048e:	3208      	adds	r2, #8
 8000490:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	7a5b      	ldrb	r3, [r3, #9]
 8000498:	461a      	mov	r2, r3
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	fa02 f303 	lsl.w	r3, r2, r3
 80004a2:	4618      	mov	r0, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	7bfa      	ldrb	r2, [r7, #15]
 80004aa:	4301      	orrs	r1, r0
 80004ac:	3208      	adds	r2, #8
 80004ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pinConfig = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	61fb      	str	r3, [r7, #28]
		altNumber = 0 ;
 80004b6:	2300      	movs	r3, #0
 80004b8:	73fb      	strb	r3, [r7, #15]

}
 80004ba:	bf00      	nop
 80004bc:	3724      	adds	r7, #36	; 0x24
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40013c00 	.word	0x40013c00
 80004cc:	40020000 	.word	0x40020000
 80004d0:	40020400 	.word	0x40020400
 80004d4:	40020800 	.word	0x40020800
 80004d8:	40020c00 	.word	0x40020c00
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40021c00 	.word	0x40021c00
 80004e4:	40023800 	.word	0x40023800
 80004e8:	40013800 	.word	0x40013800

080004ec <SPI_Init>:
	{
		RCC_SPI4_DS();
	}
}
void SPI_Init(SPIx_Handle_t *xSPI)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	/*
	* Enable SPI
	*/

	if(xSPI->SPIConifg.SPI_DeviceMode == SPI_DEVICE_MODE_MASTER)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d108      	bne.n	800050e <SPI_Init+0x22>
		/*
		 * Device mode
		 */
		xSPI->pSPIx->SPI_CR1 |= (SPI_DEVICE_MODE_MASTER<<2);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f042 0204 	orr.w	r2, r2, #4
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	e009      	b.n	8000522 <SPI_Init+0x36>
	else if (xSPI->SPIConifg.SPI_DeviceMode == SPI_DEVICE_MODE_SLAVE)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	791b      	ldrb	r3, [r3, #4]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d105      	bne.n	8000522 <SPI_Init+0x36>
		xSPI->pSPIx->SPI_CR1 |= (SPI_DEVICE_MODE_SLAVE<<2);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	6812      	ldr	r2, [r2, #0]
 8000520:	601a      	str	r2, [r3, #0]
	/*
	 * Bus config
	 * On restart configured as master
	 */
	if(xSPI->SPIConifg.SPI_BusConfig == SPI_BUSCONFIG_HALF)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	795b      	ldrb	r3, [r3, #5]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d10b      	bne.n	8000542 <SPI_Init+0x56>
		xSPI->pSPIx->SPI_CR1 |= (xSPI->SPIConifg.SPI_BusConfig<<15);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	795b      	ldrb	r3, [r3, #5]
 8000534:	03db      	lsls	r3, r3, #15
 8000536:	4619      	mov	r1, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	430a      	orrs	r2, r1
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	e01e      	b.n	8000580 <SPI_Init+0x94>
	else if (xSPI->SPIConifg.SPI_BusConfig == SPI_BUSCONFIG_TX_ONLY)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	795b      	ldrb	r3, [r3, #5]
 8000546:	2b02      	cmp	r3, #2
 8000548:	d10b      	bne.n	8000562 <SPI_Init+0x76>
		xSPI->pSPIx->SPI_CR1 |= (xSPI->SPIConifg.SPI_BusConfig<<15);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	795b      	ldrb	r3, [r3, #5]
 8000554:	03db      	lsls	r3, r3, #15
 8000556:	4619      	mov	r1, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	430a      	orrs	r2, r1
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	e00e      	b.n	8000580 <SPI_Init+0x94>
	else if (xSPI->SPIConifg.SPI_BusConfig == SPI_BUSCONFIG_RX_ONLY)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	795b      	ldrb	r3, [r3, #5]
 8000566:	2b03      	cmp	r3, #3
 8000568:	d10a      	bne.n	8000580 <SPI_Init+0x94>
		xSPI->pSPIx->SPI_CR1 |= (xSPI->SPIConifg.SPI_BusConfig<<8);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	795b      	ldrb	r3, [r3, #5]
 8000574:	021b      	lsls	r3, r3, #8
 8000576:	4619      	mov	r1, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	430a      	orrs	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
	/*
	 * SSM
	 */
	if(xSPI->SPIConifg.SPI_SSM == SPI_NSS_SOFTWARE)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	7a9b      	ldrb	r3, [r3, #10]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d115      	bne.n	80005b4 <SPI_Init+0xc8>
	{
		xSPI->pSPIx->SPI_CR1 |= (xSPI->SPIConifg.SPI_SSM<<9);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	7a9b      	ldrb	r3, [r3, #10]
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4619      	mov	r1, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	430a      	orrs	r2, r1
 800059c:	601a      	str	r2, [r3, #0]

		xSPI->pSPIx->SPI_CR1 |= (xSPI->SPIConifg.SPI_SSM<<8);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	7a9b      	ldrb	r3, [r3, #10]
 80005a8:	021b      	lsls	r3, r3, #8
 80005aa:	4619      	mov	r1, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	430a      	orrs	r2, r1
 80005b2:	601a      	str	r2, [r3, #0]
	//TODO

	/*
	 * Clock speed
	 */
	xSPI->pSPIx->SPI_CR1 |= (xSPI->SPIConifg.SPI_CLKSpeed<<3);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	799b      	ldrb	r3, [r3, #6]
 80005be:	00db      	lsls	r3, r3, #3
 80005c0:	4619      	mov	r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	601a      	str	r2, [r3, #0]
	/*
	 * DFF
	 */
	xSPI->pSPIx->SPI_CR1 |= (xSPI->SPIConifg.SPI_DFF<<11);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	79db      	ldrb	r3, [r3, #7]
 80005d4:	02db      	lsls	r3, r3, #11
 80005d6:	4619      	mov	r1, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	430a      	orrs	r2, r1
 80005de:	601a      	str	r2, [r3, #0]
	/*
	 * CPOL
	 */
	if(xSPI->SPIConifg.SPI_CPOL == SPI_CPOL_FALLING)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7a1b      	ldrb	r3, [r3, #8]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d10a      	bne.n	80005fe <SPI_Init+0x112>
		xSPI->pSPIx->SPI_CR1 |= (xSPI->SPIConifg.SPI_CPOL<<1);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	7a1b      	ldrb	r3, [r3, #8]
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	4619      	mov	r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	430a      	orrs	r2, r1
 80005fc:	601a      	str	r2, [r3, #0]

	if(xSPI->SPIConifg.SPI_CPHA == SPI_CPHA_Second)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	7a5b      	ldrb	r3, [r3, #9]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d10a      	bne.n	800061c <SPI_Init+0x130>
		xSPI->pSPIx->SPI_CR1 |= (xSPI->SPIConifg.SPI_CPHA<<1);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7a5b      	ldrb	r3, [r3, #9]
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4619      	mov	r1, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	430a      	orrs	r2, r1
 800061a:	601a      	str	r2, [r3, #0]
	xSPI->pSPIx->SPI_CR1 |= (1<<6);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800062a:	601a      	str	r2, [r3, #0]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <SPI_Send_Polling>:

}

void SPI_Receive_Polling(SPIx_RegDef *xSPI, uint8_t *RXbuffor,uint32_t length);
void SPI_Send_Polling(SPIx_RegDef *xSPI, uint8_t *TXbuffor,uint32_t length)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
	while(length>0)
 8000644:	e025      	b.n	8000692 <SPI_Send_Polling+0x5a>
	{


		while(((xSPI->SPI_SR)>>1)==0);
 8000646:	bf00      	nop
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	085b      	lsrs	r3, r3, #1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0fa      	beq.n	8000648 <SPI_Send_Polling+0x10>
		if(xSPI->SPI_CR1 & (1<11))
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	2b00      	cmp	r3, #0
 800065c:	d00e      	beq.n	800067c <SPI_Send_Polling+0x44>
		{

			xSPI->SPI_DR = *((uint16_t*)TXbuffor);
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	60da      	str	r2, [r3, #12]


			length--;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3b01      	subs	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
			length--;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3b01      	subs	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
			(uint16_t*)TXbuffor++;
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	3301      	adds	r3, #1
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	e00a      	b.n	8000692 <SPI_Send_Polling+0x5a>
		}
		else
		{
			xSPI->SPI_DR = *((uint8_t*)TXbuffor);
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	60da      	str	r2, [r3, #12]
			length--;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3b01      	subs	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
			TXbuffor++;
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	3301      	adds	r3, #1
 8000690:	60bb      	str	r3, [r7, #8]
	while(length>0)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1d6      	bne.n	8000646 <SPI_Send_Polling+0xe>
		}
		}
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <main>:
#include <stdint.h>
#include <string.h>
#include "stm32f411x.h"
#include "stm32f411x_gpio.h"
int main(void)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b08d      	sub	sp, #52	; 0x34
 80006ac:	af00      	add	r7, sp, #0
	*					Configuring GPIO for SPI alt function 5
	===================================================================================================
	*/


	RCC_GPIOB_EN();
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <main+0xc0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a2d      	ldr	r2, [pc, #180]	; (8000768 <main+0xc0>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
	RCC_SPI2_EN();
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <main+0xc0>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <main+0xc0>)
 80006c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c4:	6413      	str	r3, [r2, #64]	; 0x40
	GPIOx_Handle_t hSPI2Pins;
	hSPI2Pins.pGPIOx = GPIOB;
 80006c6:	4b29      	ldr	r3, [pc, #164]	; (800076c <main+0xc4>)
 80006c8:	623b      	str	r3, [r7, #32]
	hSPI2Pins.GPIO_PinConfig.pinMode = GPIO_MODE_ALF;
 80006ca:	2302      	movs	r3, #2
 80006cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	hSPI2Pins.GPIO_PinConfig.pinAltFun = 5;
 80006d0:	2305      	movs	r3, #5
 80006d2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	hSPI2Pins.GPIO_PinConfig.pinOType = GPIO_OUTPUT_PP;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	hSPI2Pins.GPIO_PinConfig.pinPuPd = GPIO_PULL_NONE;
 80006dc:	2300      	movs	r3, #0
 80006de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	hSPI2Pins.GPIO_PinConfig.pinSpeed = GPIO_SPEED_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	//MISO
	//hSPI2Pins.GPIO_PinConfig.pinNumber = 14;
	//GPIO_Init(&hSPI2Pins);
	//MOSI
	hSPI2Pins.GPIO_PinConfig.pinNumber = 15;
 80006e8:	230f      	movs	r3, #15
 80006ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_Init(&hSPI2Pins);
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fd78 	bl	80001e8 <GPIO_Init>
	//NSS
	//hSPI2Pins.GPIO_PinConfig.pinNumber = 12;
	//GPIO_Init(&hSPI2Pins);
	//SCLK
	hSPI2Pins.GPIO_PinConfig.pinNumber = 10;
 80006f8:	230a      	movs	r3, #10
 80006fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_Init(&hSPI2Pins);
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fd70 	bl	80001e8 <GPIO_Init>
	===================================================================================================
	*/

	SPIx_Handle_t hSPI2;

	hSPI2.pSPIx = SPI2;
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <main+0xc8>)
 800070a:	617b      	str	r3, [r7, #20]
	hSPI2.SPIConifg.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800070c:	2301      	movs	r3, #1
 800070e:	763b      	strb	r3, [r7, #24]
	hSPI2.SPIConifg.SPI_BusConfig  = SPI_BUSCONFIG_FULL;
 8000710:	2300      	movs	r3, #0
 8000712:	767b      	strb	r3, [r7, #25]
	hSPI2.SPIConifg.SPI_DFF = SPI_DFF_8bit;
 8000714:	2300      	movs	r3, #0
 8000716:	76fb      	strb	r3, [r7, #27]
	hSPI2.SPIConifg.SPI_CPHA = SPI_CPHA_First;
 8000718:	2300      	movs	r3, #0
 800071a:	777b      	strb	r3, [r7, #29]
	hSPI2.SPIConifg.SPI_CPOL = SPI_CPOL_FALLING;
 800071c:	2300      	movs	r3, #0
 800071e:	773b      	strb	r3, [r7, #28]
	hSPI2.SPIConifg.SPI_SSM = SPI_NSS_SOFTWARE;
 8000720:	2301      	movs	r3, #1
 8000722:	77bb      	strb	r3, [r7, #30]

	SPI_Init(&hSPI2);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fedf 	bl	80004ec <SPI_Init>


	char userData[] = "Hello from SPI";
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <main+0xcc>)
 8000730:	1d3c      	adds	r4, r7, #4
 8000732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000734:	c407      	stmia	r4!, {r0, r1, r2}
 8000736:	8023      	strh	r3, [r4, #0]
 8000738:	3402      	adds	r4, #2
 800073a:	0c1b      	lsrs	r3, r3, #16
 800073c:	7023      	strb	r3, [r4, #0]


	while (1)
	{
		SPI_Send_Polling(SPI2,(uint8_t*)userData,strlen(userData));
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd49 	bl	80001d8 <strlen>
 8000746:	4602      	mov	r2, r0
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4808      	ldr	r0, [pc, #32]	; (8000770 <main+0xc8>)
 800074e:	f7ff ff73 	bl	8000638 <SPI_Send_Polling>

		for (int i =0;i<500;i++);
 8000752:	2300      	movs	r3, #0
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000756:	e002      	b.n	800075e <main+0xb6>
 8000758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075a:	3301      	adds	r3, #1
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800075e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000760:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000764:	dbf8      	blt.n	8000758 <main+0xb0>
		SPI_Send_Polling(SPI2,(uint8_t*)userData,strlen(userData));
 8000766:	e7ea      	b.n	800073e <main+0x96>
 8000768:	40023800 	.word	0x40023800
 800076c:	40020400 	.word	0x40020400
 8000770:	40003800 	.word	0x40003800
 8000774:	0800082c 	.word	0x0800082c

08000778 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800077a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800077c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000782:	490d      	ldr	r1, [pc, #52]	; (80007b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <LoopForever+0xe>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000798:	4c0a      	ldr	r4, [pc, #40]	; (80007c4 <LoopForever+0x16>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a6:	f000 f811 	bl	80007cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007aa:	f7ff ff7d 	bl	80006a8 <main>

080007ae <LoopForever>:

LoopForever:
    b LoopForever
 80007ae:	e7fe      	b.n	80007ae <LoopForever>
  ldr   r0, =_estack
 80007b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007bc:	08000844 	.word	0x08000844
  ldr r2, =_sbss
 80007c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007c4:	2000001c 	.word	0x2000001c

080007c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC_IRQHandler>
	...

080007cc <__libc_init_array>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	4d0d      	ldr	r5, [pc, #52]	; (8000804 <__libc_init_array+0x38>)
 80007d0:	4c0d      	ldr	r4, [pc, #52]	; (8000808 <__libc_init_array+0x3c>)
 80007d2:	1b64      	subs	r4, r4, r5
 80007d4:	10a4      	asrs	r4, r4, #2
 80007d6:	2600      	movs	r6, #0
 80007d8:	42a6      	cmp	r6, r4
 80007da:	d109      	bne.n	80007f0 <__libc_init_array+0x24>
 80007dc:	4d0b      	ldr	r5, [pc, #44]	; (800080c <__libc_init_array+0x40>)
 80007de:	4c0c      	ldr	r4, [pc, #48]	; (8000810 <__libc_init_array+0x44>)
 80007e0:	f000 f818 	bl	8000814 <_init>
 80007e4:	1b64      	subs	r4, r4, r5
 80007e6:	10a4      	asrs	r4, r4, #2
 80007e8:	2600      	movs	r6, #0
 80007ea:	42a6      	cmp	r6, r4
 80007ec:	d105      	bne.n	80007fa <__libc_init_array+0x2e>
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007f4:	4798      	blx	r3
 80007f6:	3601      	adds	r6, #1
 80007f8:	e7ee      	b.n	80007d8 <__libc_init_array+0xc>
 80007fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80007fe:	4798      	blx	r3
 8000800:	3601      	adds	r6, #1
 8000802:	e7f2      	b.n	80007ea <__libc_init_array+0x1e>
 8000804:	0800083c 	.word	0x0800083c
 8000808:	0800083c 	.word	0x0800083c
 800080c:	0800083c 	.word	0x0800083c
 8000810:	08000840 	.word	0x08000840

08000814 <_init>:
 8000814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000816:	bf00      	nop
 8000818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800081a:	bc08      	pop	{r3}
 800081c:	469e      	mov	lr, r3
 800081e:	4770      	bx	lr

08000820 <_fini>:
 8000820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000822:	bf00      	nop
 8000824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000826:	bc08      	pop	{r3}
 8000828:	469e      	mov	lr, r3
 800082a:	4770      	bx	lr
